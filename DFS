import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

class Graph {
    private int V; // Number of vertices
    private List<List<Integer>> adj; // Adjacency list representation

    public Graph(int v) {
        V = v;
        adj = new ArrayList<>(v);
        for (int i = 0; i < v; i++) {
            adj.add(new ArrayList<>());
        }
    }

    // Add an edge to the graph
    public void addEdge(int v, int w) {
        adj.get(v).add(w);
    }

    // DFS traversal starting from vertex v
    public void DFS(int v) {
        boolean[] visited = new boolean[V]; // To keep track of visited vertices

        // Create a stack for DFS
        Stack<Integer> stack = new Stack<>();

        // Push the current vertex onto the stack and mark it as visited
        stack.push(v);
        visited[v] = true;

        while (!stack.isEmpty()) {
            // Pop a vertex from the stack and print it
            v = stack.pop();
            System.out.print(v + " ");

            // Get all adjacent vertices of the popped vertex
            for (Integer neighbor : adj.get(v)) {
                // If the adjacent vertex is not visited, push it onto the stack and mark it as visited
                if (!visited[neighbor]) {
                    stack.push(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
    }
}

public class DFSExample {
    public static void main(String[] args) {
        Graph graph = new Graph(7); // Create a graph with 7 vertices

        // Add edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);
        graph.addEdge(2, 6);

        System.out.println("Depth-First Traversal (starting from vertex 0):");
        graph.DFS(0);
    }
}
